# -*- coding: utf-8 -*-
"""Fifa-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jf5WhVrJpyvw65m_pFaoXza9t9Smr1fj
"""

import pandas as pd

df1 = pd.read_csv('players_20.csv')


print(df1.head())

for column in df1.columns:
    if df1[column].dtype == 'object':
        df1[column].fillna(df1[column].mode()[0], inplace=True)
    else:
        df1[column].fillna(df1[column].median(), inplace=True)

cleaned_file_path = 'cleaned_players_20.csv'
df1.to_csv(cleaned_file_path, index=False)

from google.colab import files
files.download('cleaned_players_20.csv')

df = pd.read_csv('cleaned_players_20.csv')

df.head(25)

print(df.columns)

print("Number of rows:", df.shape[0])
print("Number of columns:", df.shape[1])

# Number of players in each country
players_per_country = df['nationality'].value_counts()
print(players_per_country)

# Top 10 countries with the highest number of players
top_10_countries = players_per_country.head(10)
print(top_10_countries)

import matplotlib.pyplot as plt


top_5_countries = players_per_country.head(5)


plt.figure(figsize=(10, 6))
top_5_countries.plot(kind='bar', color='green')
plt.title('Top 5 Countries with the Highest Number of Players')
plt.xlabel('Country')
plt.ylabel('Number of Players')
plt.xticks(rotation=45)
plt.show()

# Top 5 players by overall rating
top_5_players = df[['short_name', 'wage_eur']].sort_values(by='wage_eur', ascending=False).head(5)
print(top_5_players)

# Repeating the previous step as it matches the described task
print(top_5_players)

import matplotlib.pyplot as plt

# Assuming top_5_players is already defined as shown in the previous step
plt.figure(figsize=(10, 6))
plt.bar(top_5_players['short_name'], top_5_players['wage_eur'], color='green')
plt.title('Top 5 Players by Wages')
plt.xlabel('Player Short Name')
plt.ylabel('Wage (â‚¬)')
plt.xticks(rotation=45)
plt.show()

# Filter Germany players and show top 10 records
germany_players = df[df['nationality'] == 'Germany']
top_10_germany_players = germany_players.head(10)
print(top_10_germany_players)

# Top 5 Germany players by height, weight, and wage
top_germany_by_height = germany_players.sort_values(by='height_cm', ascending=False).head(5)
top_germany_by_weight = germany_players.sort_values(by='weight_kg', ascending=False).head(5)
top_germany_by_wage = germany_players.sort_values(by='wage_eur', ascending=False).head(5)

print("Top 5 Germany Players by Height")
print(top_germany_by_height[['short_name', 'height_cm']])
print("\nTop 5 Germany Players by Weight")
print(top_germany_by_weight[['short_name', 'weight_kg']])
print("\nTop 5 Germany Players by Wage")
print(top_germany_by_wage[['short_name', 'wage_eur']])

# Top 5 Germany players by wages
top_5_germany_wages = germany_players[['short_name', 'wage_eur']].sort_values(by='wage_eur', ascending=False).head(5)
print(top_5_germany_wages)

# Assuming 'defending' is the column that measures defending skills
top_defenders = df.sort_values(by='defending', ascending=False)[['short_name', 'defending', 'nationality', 'club']].head(5)
print(top_defenders)

# Filter Real Madrid players
real_madrid_players = df[df['club'] == 'Real Madrid']

# Sort by wage and display top 5
top_wages_real_madrid = real_madrid_players.sort_values(by='wage_eur', ascending=False)[['short_name', 'wage_eur']].head(5)
print(top_wages_real_madrid)

# Sort by shooting and display top 5
top_shooting_real_madrid = real_madrid_players.sort_values(by='shooting', ascending=False)[['short_name', 'shooting']].head(5)
print(top_shooting_real_madrid)

# Sort by defending and display top 5
top_defending_real_madrid = real_madrid_players.sort_values(by='defending', ascending=False)[['short_name', 'defending']].head(5)
print(top_defending_real_madrid)

# Display nationality of top 5 players (based on overall rating, if not specified)
top_nationality_real_madrid = real_madrid_players[['short_name', 'nationality']].head(5)
print(top_nationality_real_madrid)

# Calculate the average age of Real Madrid players
average_age_real_madrid = real_madrid_players['age'].mean()
print(f"The average age of Real Madrid players is: {average_age_real_madrid:.2f}")





